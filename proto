// tuto affichage lcd i2c : https://arduino-info.wikispaces.com/LCD-Blue-I2C
// tuto registre a décalage : http://eskimon.fr/269-arduino-annexe-1-ajouter-des-sorties-a-arduino-74hc595


#include <Wire.h>
#include <LiquidCrystal_I2C.h>

//Variables

#define nombre_de_74hc595 2 // Nombre de 74HC595 en série
#define nombreDeSorties nombre_de_74hc595 * 8 // Nombre de pins33
#define verrouPin 11   // Broche connectée au ST_CP du 74HC595
#define horlogePin 12   // Broche connectée au SH_CP du 74HC595
#define dataPin 10   // Broche connectée au DS du 74HC595
#define DeltaT 500

long TZero = 0;     //valeur de temps à laquelle une ligne est activé
unsigned int registreBit = 0 ; // byte intégrant l'état de la ligne n sur le bit de rang n-1

LiquidCrystal_I2C lcd(0x27, 2, 1, 0, 4, 5, 6, 7, 3, POSITIVE);  // Défini l'adresse de l'écran

void setup()
{
  Serial.begin(9600);  // Ouverture voie série
  pinMode(verrouPin, OUTPUT);
  pinMode(horlogePin, OUTPUT);
  pinMode(dataPin, OUTPUT);

  maJSorties();
  // comment éviter d'avoir des leds allumés au démarrage, quand on branche sur l'USB ??

  lcd.begin(16, 2);  // initialisation de l'écran pour 16 charactères sur 2 lignes, avec rétro-éclairage

  // setCursor(COLONNE, LIGNE) ==> (0,0)= en haut à gauche et (15,1)= en bas à droite
  lcd.setCursor(1, 0); // setCursor(COLONNE, LIGNE) ==> (0,0)= en haut à gauche et (15,1)= en bas à droite
  lcd.print("Mot de passe :");
  delay(2000);
  int i = 0;
  unsigned int mDPTransmis = 0;                // chaine de charactère transmise
  while (1) {                         // boucle infinie pour tester le mot de passe
    if (Serial.available()) {         //si un caractère arrive
      int chiffreLu = Serial.read();        //on lit le caractère
      if (chiffreLu >= '0' && chiffreLu <= '9') { //vérifie que la valeur envoyé est bien un nombre compris entre à et 9
        chiffreLu = chiffreLu - '0';            // on déduit le nombre ascii de O
        mDPTransmis = mDPTransmis + (chiffreLu << 4 * i);     //on ajoute côté bit de poids fort le chiffre transmis à la chaine
        i++;
        Serial.println(chiffreLu);          // on renvoi le chiffre reçu
        Serial.println(mDPTransmis, BIN);          // on renvoi le chiffre reçu
        lcd.setCursor((i + 5), 1);
        lcd.print("*");
      }
    }
    if (i == 4) {
      if (mDPTransmis == 0b100001100100001 ) { //si mDPTransmis = "1234"
        lcd.clear();
        lcd.setCursor(4, 0);
        lcd.print("Youpi");
        delay(2000);
        break; //sortie de la boucle infinie while
      }
      else {
        mDPTransmis = 0;
        i = 0;
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Saisie erronnee");
        delay(2000);
        lcd.clear();
        lcd.setCursor(1, 0);
        lcd.print("Mot de passe :");
      }
    }
  }
}

void loop()
{
  if (Serial.available()) {             // si des bits arrivent sur le port série
    lcd.clear();                        // effacer écran
    long nbrTransmis = 0;                // chaine de charactère transmise
    while (Serial.available() > 0) {    // tant qu'il y a des données à lire
      int chiffreLu = Serial.read();        //on lit le caractère
      //Serial.println(chiffreLu);
      //lcd.setCursor(0, 1);
      //lcd.print(chiffreLu);
      if (chiffreLu >= '0' && chiffreLu <= '9') { //vérifie que la valeur envoyé est bien un nombre compris entre à et 9
        chiffreLu = chiffreLu - '0';            // on déduit le nombre ascii de O
        nbrTransmis = nbrTransmis * 10 + chiffreLu;     //on ajoute le chiffre transmis au nombre
        //Serial.println(chiffreLu);          // on renvoi le chiffre reçu
      }
     }
    lcd.setCursor(0, 1);                // on se posisitionne à la ligne du bas
    lcd.print(nbrTransmis);             // on affiche le nombre transmis
    nbrTransmis = nbrTransmis - 1;      // faire correspondre la led 1 à la position de registre O (les lignes vont de 1 à 16 et la regsitre de 0 à 15)
    if (nbrTransmis <= (nombreDeSorties - 1) && nbrTransmis >= 0) { // si le nombre est compris entre 0 et 15
      registreBit |= 1 << nbrTransmis;
      TZero = millis();                 // on enrgistre à quel moment ça a été fait
    }
    maJSorties();
  }
  if (millis() > (TZero + DeltaT) && TZero > 0) { // si il s'est écoulé plus de "deltaT" milliseconds on remet toutes les sorties à zéro
    registreBit = 0 ;
    lcd.clear();
    TZero = 0; //permet à la boucle de ne plus s'exécuter tant qu'on ne déclenche plus de ligne
    maJSorties();
  }
}

void maJSorties() { //met à jour les sorties selon l'état des bits du registreBit
  digitalWrite(verrouPin, LOW); // désactive les sorties
  for (int i = nombreDeSorties - 1; i >=  0; i--) { // transmet l'état des bits du registreBit décale le registre du CI
    digitalWrite(horlogePin, LOW);
    digitalWrite(dataPin, ((registreBit >> i) & 1));    //transmet l'état du bit de rang i du registreBit
    digitalWrite(horlogePin, HIGH);// décale
  }
  digitalWrite(verrouPin, HIGH); // on affiche
}


